digraph {
  unhappy[
    shape="box",
    style=rounded,
    label="React 讓你不爽"
  ]
  unhappy -> are_you_using_react_boilerplates;

  # Boilerplate Fatigue

  are_you_using_react_boilerplates[
    shape="diamond",
    label="你是通過複製示例項目
    學習 React 麼？"
  ]
  are_you_using_react_boilerplates -> boilerplates_dont_teach[label="是"]
  are_you_using_react_boilerplates -> steal_from_boilerplates[label="否"]

  boilerplates_dont_teach[
    shape="box",
    label="跟著示例項目學 React 就好像在一家超棒的
    餐廳裡通過點菜來學做飯一樣。這壓根沒用。你得從基礎
    學起，不要怕有所遺漏。這沒有根據。人們之所以建立
    示例項目是為了展示他們所創造的、學到的，而不是為了
    幫助你學習。示例項目是為更有經驗的人準備的，並且
    通常要比被承認的更具試驗性。示例項目彼此競爭，為了
    獲得更多的注意力往往有所誇大。如果你確實對 React
    感興趣，你應該按照　Pete Hunt 的指南來學習:
    https://github.com/petehunt/react-howto.
    在你能自己建立示例項目前不要看網上的。"
  ]
  boilerplates_dont_teach -> are_you_using_flux

  steal_from_boilerplates[
    shape="box",
    label="雖然示例項目對於學習它綜合的各種技術
    不是一個很好的方法，但是當你掌握這裡的每一項
    技術後，示例項目能夠幫助你瞭解這些技術是如何
    協同工作的。這是發現新技術的好途徑，但是不要
    覺得有使用的義務。不過也不要把示例項目束之高閣，
    只要記住示例項目是各種技巧的一鍋燴，並不能
    被當做應用堅實的基礎。
    "
  ]
  steal_from_boilerplates -> are_you_using_flux

  # Flux Fatigue

  are_you_using_flux[
    shape="diamond",
    label="你在使用 Flux
    （或者 Redux 麼）？"
  ]
  are_you_using_flux -> is_too_much_flux[label="是"]
  are_you_using_flux -> is_not_enough_flux[label="否"]

  is_too_much_flux[
    shape="diamond",
    label="它是不是增加了
    一堆無用程式碼？"
  ]
  is_too_much_flux -> remove_flux[label="是"]
  is_too_much_flux -> are_you_using_bundler[label="否"]

  is_not_enough_flux[
    shape="diamond",
    label="在元件依賴的頂端有沒有一堆
    經常出 Bug 的狀態元件?"
  ]
  is_not_enough_flux -> add_flux[label="是"]
  is_not_enough_flux -> are_you_using_bundler[label="否"]

  add_flux[
    shape="box",
    label="新增 Flux 庫。它能夠把元件間共享的
    狀態轉移到外部，並用一致的方式來更新。"
  ]
  add_flux -> are_you_using_bundler

  remove_flux[
    shape="box",
    label="去掉 Flux 庫。通過閱讀官方文件
     “Thinking in React”，來體會用純生的 React
     怎麼建立一個結構良好的應用。"
  ]
  remove_flux -> are_you_using_bundler

  # Bundler Fatigue

  are_you_using_bundler[
    shape="diamond",
    label="你在使用 JavaScript 打包工具麼
    (例如 Webpack, Browserify)?"
  ]
  are_you_using_bundler -> are_you_working_on_production_app_with_bundler[label="是"]
  are_you_using_bundler -> are_you_working_on_production_app_without_bundler[label="否"]

  are_you_working_on_production_app_with_bundler[
    shape="diamond",
    label="正在做一個要上線的項目麼?"
  ]
  are_you_working_on_production_app_with_bundler -> do_you_know_es2015[label="是"]
  are_you_working_on_production_app_with_bundler -> remove_bundler[label="否"]

  are_you_working_on_production_app_without_bundler[
    shape="diamond",
    label="正在做一個要上線的項目麼?"
  ]
  are_you_working_on_production_app_without_bundler -> add_bundler[label="是"]
  are_you_working_on_production_app_without_bundler -> do_you_know_es2015[label="否"]

  add_bundler[
    shape="box",
    label="在構建步驟新增一個打包的過程
    能夠很好的管理依賴並且更有效地傳輸
    JavaScript 程式碼。
    使用 Google Page Speed 來測量做得
    怎麼樣。別忘了壓縮和環境化你的程式碼。"
  ]
  add_bundler -> do_you_know_es2015

  remove_bundler[
    shape="box",
    label="如果你只是學習 React 沒有必要
    使用打包工具。直接克隆這個項目
    https://github.com/jarsbe/react-simple
    開始你的學習，還不用考慮打包的問題。
    你可以一直使用 <Script> 標籤直到熟悉
    React，然後再瞭解一下模組系統和不同
    的打包工具。"
  ]
  remove_bundler -> do_you_know_es2015

  # ES2015 Fatigue

  do_you_know_es2015[
    shape="diamond",
    label="你瞭解並且能夠接受 ES2015
    的特性嗎
    (比如 類和箭頭函數)?"
  ]
  do_you_know_es2015 -> use_es5[label="否"]
  do_you_know_es2015 -> are_you_using_dangerous_features[label="是"]

  use_es5[
    shape="box",
    label="先別用 ES2015。學習 React 不需要它。
    第三方庫在文件裡通常使用 ES2015 的語法，
    但是如果你只是學習 React 還用不到第三方庫。
    當你想要更新你的 JavaScript 知識時：
    https://leanpub.com/understandinges6/read
    是超棒的指南.使用線上工具：
    http://babeljs.io/repl
    來驗證你的各種假設。"
  ]
  use_es5 -> do_you_update_packages_asap

  # ESnext Fatigue

  are_you_using_dangerous_features[
    shape="diamond",
    label="你在使用一些沒有加入到
    ES2015 的試驗特性嗎
    (例如 裝飾器)?"
  ]
  are_you_using_dangerous_features -> can_you_spend_days_on_your_tooling[label="是"]
  are_you_using_dangerous_features -> do_you_update_packages_asap[label="否"]

  can_you_spend_days_on_your_tooling[
    shape="diamond",
    label="您能每隔幾周就花上幾天時間
    來修復工具鏈導致的 Bug，不相容
    和標準的變動麼？"
  ]
  can_you_spend_days_on_your_tooling -> do_you_update_packages_asap[label="能"]
  can_you_spend_days_on_your_tooling -> stick_to_es2015[label="不能"]

  stick_to_es2015[
    shape="box",
    label="堅持只用 ES2015，JSX 和屬性專遞操作符。"
  ]
  stick_to_es2015 -> do_you_update_packages_asap

  # Semver Fatigue

  do_you_update_packages_asap[
    shape="diamond",
    label="當依賴的庫有重大版本
    更新時你會跟上麼？"
  ]
  do_you_update_packages_asap -> give_it_two_months[label="會"]
  do_you_update_packages_asap -> consider_updating_react[label="不會"]

  give_it_two_months[
    shape="box",
    label="除非是 React 這種每次釋出前經過嚴格測試的庫，
    否則你應該讓更新的速度慢下來。
    你可以在分支裡嘗試依賴庫的新版本，
    直到社羣發現和修復了絕大部分的問題。
    不要因為怕被落下就做決定。
    要查詢舊版本的文件，別忘了檢視 Github 上
    帶 Tag 的釋出版本，比如
    https://github.com/reactjs/react-router/tree/0.13.x/doc"
  ]
  give_it_two_months -> are_you_still_sad

  consider_updating_react[
    shape="box",
    label="這是個好決定。
    不過我們還是鼓勵你在 React 新版本出來的時候
    （在分支裡）嘗試它。與社羣模組不同，React
    經過了 Facebook 的嚴格測試。
    要留意釋出日誌，因為它們通常連線到能夠自動
    化一部分遷移過程的 codemods。"
  ]
  consider_updating_react -> are_you_still_sad

  # End

  are_you_still_sad[
    shape="diamond",
    label="你還不爽麼？"
  ]
  are_you_still_sad -> rant[label="是"];
  are_you_still_sad -> happy[label="否"];

  rant[
    shape="box",
    label="
    把你遇到的問題寫成有建設性的部落格，
    避免人身攻擊。
    有禮貌。
    幫助社羣來尋找解決方案。
    考慮一下其它更符合你的需求的技術棧
    （比如 Ember）。
    "
  ]
  rant -> happy

  happy[
    shape="box",
    label="React 讓你爽歪歪！又或者至少不再不爽。"
  ]
  happy -> share

  share [
    shape="box",
    style=rounded,
    label="分享這個流程圖
    https://github.com/gaearon/react-makes-you-sad
    基於和啟發
    https://github.com/petehunt/react-howto
    中文翻譯
    https://github.com/wyvernnot/react-makes-you-sad
    "
  ]
}
